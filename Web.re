= 技書博ウェブサイトを支える技術

イベントへのご来場ありがとうございます。技書博のWebサイト（gishohaku.dev）を担当したもっと（@mottox2）です。この特集では、イベントのWebサイトを作る際にどういうことを考えて、どういった選択をしたかについて書かせてもらいました。
時間・予算という制約がある中でどういう選択をしたのか、少しでも役にたつ記事であったなら嬉しいです。

== 技術選定
=== 要件の整理

まず、技書博のWebサイトでは次のような機能を持っています

 * 会員登録・ログイン
 * サークル・頒布物に対してチェックを行える
 * サークル情報が更新できる
 * 頒布物情報が作成・更新できる
 * サークル・頒布物のチェック数を確認できる
 * サークルへの参加招待リンクを発行できる
 * 見本誌@<fn>{mihonshi}をアップロード・確認できる
 * 簡単に告知ページを作れる

//footnote[mihonshi][イベントで頒布される同人誌に関しては、不適切なものがないか確認を行うためのものです。]


これを見て簡単じゃないかと思った人はその通りです。一般的なサーバーサイドフレームワークを利用するのであれば、入社時の研修レベルで扱う題材のレベル感だと思います。

しかし、機能だけではなくどういう環境で運用されるかを考えてみると、イベントサイトという特性から次のような観点が必要になります。

 * アクセスに波があるため、スケーラビリティがある程度必要。
 * イベント当日に落ちても工数をかけにくい。

//image[image1][サークル用画面][scale=0.7]

ここで思いついたのは、

 * 通常のサーバーサイドアプリケーションを実装し、FastlyやCloudflareなどのCDNを利用し負荷を軽減させるパターン。
 * バックエンドを任せられるサービスを利用し、フロントエンド中心の実装を進める。

イベントの参加者数を見積もって事前にサーバーを用意しておくことも出来ます。しかし、サーバーレスな設計にすれば予算的にも、保守工数的にもメリットが得られると考えました。（技術同人誌のテーマにしたいという個人的な理由もありますが…）

=== Firebaseの採用

結果として、mBaaSのFirebaseを採用し技書博のWebでは、Hosting / Cloud Functionsでサイトを配信し、Authenticationでログイン機能を提供し、Firestore / Storageでサークル情報を管理しています。

Firebaseはインフラの管理不要でアプリケーションに必要なバックエンドを用意できるサービスです。主に次のような機能を提供しています。

 * Hosting: Webサイトのホスティング
 * Firestore/RealtimeDatabase: データベース
 * Firebase Storage: ストレージ
 * Cloud Functions for Firebase: バックエンドコードの実行環境
 * Firebase Authentication: ユーザー認証
 * アナリティクス、機械学習、通知基盤等

これらのサービスを組み合わせることでサーバーを意識せずにアプリケーションを公開することが可能になります。

=== React/Next.js（SPA/SSR）の採用

今回のサイトを構築する際にはReactを利用しています。

Reactは画面がフロントエンドで複雑な画面を作る際によく使われますが、今回のようなイベントサイトを作る上でもスコープ付きのCSS、コンポーネント志向、開発環境の利便性などのメリットを受けられます。

ただ、Reactはブラウザで動作するため、単体で利用する場合metaタグがクローラーやSNSに認識されません。そのため、今回はサーバーサイドでReactのレンダリングを行うNext.jsというフレームワークを利用しました。

Next.jsの出力オプションには、都度サーバーでReactをレンダリングを行うServer Side Rederingと、事前にレンダリングした結果を静的ファイルに出力するStatic HTML exportが用意されています。

この仕組みを利用して、ユーザーの入力によって画面の出力が変更されるサークルページなどは都度レンダリングを行うものをCloud Functionsで都度レンダリングを、トップページのようにデプロイごとに固定されるものに関してはHostingで配信を行うようにしました。

== 開発の進め方とポイント

今回は、要件も厳しくなく、時間もあまりかけられないことがわかったので、アプリケーションの実装には特に工夫をせず愚直に書きました。ただ、開発以外にも考慮するポイントがあったので、いくつか紹介します。

=== デザインの方針

サイトの制作全体の方針なのですが、「省エネ」をモットーに進めました。
デザインにおいてはマクロ視点の画面設計を行い、ミクロ視点なUIコンポーネントに関してはUIライブラリを主体に、足りないものを自前で作成して進めています。

実装はReactで行うので、Reactで使えるUIライブラリとしてSanchoを選択しました。
Sanchoはビルドの設定をいじる必要がない、CSSの配信も最適化しやすい、UIとして綺麗といった点で採用しています。特にフォーム周りのUIは質が高く、短い時間でフォーム周りの実装を行うことができました。

大きな画面に関しては近年ウェブ・アプリ制作でよくつかわれるようになったデザインツールのSketchでモックを作成して進めました。実装とデザインを一人で担当すると、無限に手戻りをしてしまうデメリットがあるのですが、最初にモックをゴールに据えることで、結果的に短期間の制作が可能になります。


//image[image2][プロジェクト初期に作成したSketchファイル][scale=0.9]

=== サークルページの設計

//image[image3][サークルページ][scale=0.9]

今回のWebアプリケーションで一番重要視したのが、サークル詳細画面です。

このページは、頒布物が一番目を引くように作ってあります。別目線で言えば、頒布物がないと非常に簡素なページになります。これは、頒布物及び頒布物の説明文を入力するモチベーションとして機能してほしいための配慮です。

頒布物の説明文は一般参加者が購入する際の判断材料になります。事前に購入する意思をもたせることができれば、サークル参加者が在庫を抱えるリスクも減りWin-Winな結果が得られるはずです。

結果としてどのぐらい入力されたのか、チェックされたのかに関してはどこか別の機会で公開できたらと思います。

=== デプロイとCI/CD

会社や商業のプロダクトではなくても、CI/CDは重要だと思っています。特に社外のプロジェクトでデプロイが誰か依存になるのは、製作者の負担を増やすことになります。

特に技書博のように、スタッフといえども本業を持っており、常に対応できるかわからないプロジェクトではさらに重要です。
そういった理由から、CircleCIを導入しGitHubのmasterブランチを常にデプロイするようにしました。
特にCIでデプロイは珍しいことではないですが、初期に設定したおかげで終盤だいぶ楽になりました。

=== MDからページ生成

イベントページの性質上、サークル参加者や一般参加者に対して告知するページが必要になります。
こういった要望があるたびに、エンジニアがマークアップを行うのははっきりいって無駄です。特にボランティア活動として集まっているため、非同期なコミュニケーションになりがちなので、できるだけメンバー単独で行えるようになっているべきです。

そこで、こういったページを作る際にMarkdownからページを生成する仕組みを用意しました。運営メンバーはGitHubやMarkdownに慣れているので安心して採用できました。
メンバーから見ればファイルを作ってMarkdownを書いてpushするだけです。この裏でCIが走りFirebaseにデプロイが行われます。

== おわりに

技書博のウェブはアプリケーションとしては簡単な部類でしょう。しかし、ReactのSSRをサーバーレス構成で行い、短期間でアプリケーションの地盤を整えるというチャレンジングな課題に取り組み、一応形になるまでは達成することができました。

ただ、入場チケットの配布（実際はPassMarketを利用）やサークル主に提供するチェック数の推移レポート、キャッシュ周りの最適化、頒布物一覧のリッチ化などの本来実現したかったトピックに関しては手付かずになってしまいました。

やはりサークル主を兼任しつつ@<fn>{circle}、イベントWebサイトを一人で作ることに関しては限界を感じました@<fn>{overwork}。3次回の技書博ではある程度チーム戦でよりよい
イベントウェブサイトを作れるといいなと思っています。もし、興味を持たれた方がいれば運営チームまでご一報ください。



//footnote[circle][「D-4」ブースでSlack Appsの開発本を出している予定です。執筆時点では仕上がっていません。] 

//footnote[overwork][サークル担当を諦めるとドッグフーディングが出来ないジレンマが…] 

